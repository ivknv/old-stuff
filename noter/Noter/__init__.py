#!/usr/bin/env python
# -*- coding: utf-8 -*-

# all the comments except this are autogenerated with CodeCommenter
# see https://github.com/SPython/code-commenter

import sqlite3, os

def init(db=os.path.expanduser("~/notes.db")): # Initialize database for keeping notes
	con = sqlite3.connect(db) # Connect SQLite database
	cur = con.cursor() # Get cursor
	cur.execute("CREATE TABLE notes(id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(100), text TEXT, date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);") # Execute SQLite command
	con.commit()
	con.close()

def add_note(title, text, todo=0, db=os.path.expanduser("~/notes.db")): # Add a new note
	con = sqlite3.connect(db) # Connect SQLite database
	cur = con.cursor() # Get cursor
	cur.execute("INSERT INTO notes(title, text) VALUES(\"{}\", \"{}\");".format(title, text)) # Execute SQLite command
	con.commit()
	con.close()

def rm_note(id=None, title=None,db=os.path.expanduser("~/notes.db")): # Remove note
	if id or title:
		con = sqlite3.connect(db) # Connect SQLite database
		cur = con.cursor() # Get cursor
	else:
		return None
	if id and not title:
		cur.execute("DELETE FROM notes WHERE id={};".format(id)) # Execute SQLite command
	elif title and not id:
		cur.execute("DELETE FROM notes WHERE title=\"{}\";".format(title)) # Execute SQLite command
	elif id and title:
		cur.execute("DELETE FROM notes WHERE id={} AND title=\"{}\"".format(id, title)) # Execute SQLite command
	con.commit()
	con.close()

def read(db=os.path.expanduser("~/notes.db"), slice_string="0:"):
	slice_string=[int(s) for s in slice_string.split(":") if s]
	con = sqlite3.connect(db) # Connect SQLite database
	cur = con.cursor() # Get cursor
	cur.execute("SELECT * FROM notes;") # Execute SQLite command
	if len(slice_string) == 2:
		notes = cur.fetchall()[slice_string[0]:slice_string[1]] # Get result of executing SQLite command
	else:
		notes = cur.fetchall()[slice_string[0]:] # Get result of executing SQLite command
	con.close()
	return notes

def get(id, db=os.path.expanduser("~/notes.db")): # Get note by id
	if id:
		con = sqlite3.connect(db) # Connect SQLite database
		cur = con.cursor() # Get cursor
		cur.execute("SELECT * FROM notes WHERE id={};".format(id)) # Execute SQLite command
		found=cur.fetchall() # Get result of executing SQLite command
		con.close()
		return found

def edit_note(id, title=None, text=None, db=os.path.expanduser("~/notes.db")): # Edit note
	if id and (title or text):
		con = sqlite3.connect(db) # Connect SQLite database
		cur = con.cursor() # Get cursor
		if not title and text:
			cur.execute("UPDATE notes SET text=\"{}\" WHERE id={};".format(text, id)) # Execute SQLite command
		elif title and not text:
			cur.execute("UPDATE notes SET title=\"{}\" WHERE id={};".format(title, id)) # Execute SQLite command
		elif title and text:
			cur.execute("UPDATE notes SET title=\"{}\", text=\"{}\" WHERE id={};".format(title, text, id)) # Execute SQLite command
		con.commit()
		con.close()
		return True
	return False
